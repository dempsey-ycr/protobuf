// Code generated by protoc-gen-go. DO NOT EDIT.
// source: action/bitsdaq.proto

package action

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Bitsdaq交易对象
type Bitsdaq struct {
	MatchedID            string   `protobuf:"bytes,1,opt,name=matchedID,proto3" json:"matchedID,omitempty"`
	BitsdaqID            string   `protobuf:"bytes,2,opt,name=bitsdaqID,proto3" json:"bitsdaqID,omitempty"`
	BittrexID            string   `protobuf:"bytes,3,opt,name=bittrexID,proto3" json:"bittrexID,omitempty"`
	Exchange             string   `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
	OrderType            int32    `protobuf:"varint,5,opt,name=orderType,proto3" json:"orderType,omitempty"`
	Limit                int64    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Vol                  int64    `protobuf:"varint,7,opt,name=vol,proto3" json:"vol,omitempty"`
	Revol                int64    `protobuf:"varint,8,opt,name=revol,proto3" json:"revol,omitempty"`
	Commission           float32  `protobuf:"fixed32,9,opt,name=commission,proto3" json:"commission,omitempty"`
	Price                float64  `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	PriceUnit            float32  `protobuf:"fixed32,11,opt,name=priceUnit,proto3" json:"priceUnit,omitempty"`
	Time                 string   `protobuf:"bytes,12,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bitsdaq) Reset()         { *m = Bitsdaq{} }
func (m *Bitsdaq) String() string { return proto.CompactTextString(m) }
func (*Bitsdaq) ProtoMessage()    {}
func (*Bitsdaq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c576da6b58fd095, []int{0}
}

func (m *Bitsdaq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bitsdaq.Unmarshal(m, b)
}
func (m *Bitsdaq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bitsdaq.Marshal(b, m, deterministic)
}
func (m *Bitsdaq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bitsdaq.Merge(m, src)
}
func (m *Bitsdaq) XXX_Size() int {
	return xxx_messageInfo_Bitsdaq.Size(m)
}
func (m *Bitsdaq) XXX_DiscardUnknown() {
	xxx_messageInfo_Bitsdaq.DiscardUnknown(m)
}

var xxx_messageInfo_Bitsdaq proto.InternalMessageInfo

func (m *Bitsdaq) GetMatchedID() string {
	if m != nil {
		return m.MatchedID
	}
	return ""
}

func (m *Bitsdaq) GetBitsdaqID() string {
	if m != nil {
		return m.BitsdaqID
	}
	return ""
}

func (m *Bitsdaq) GetBittrexID() string {
	if m != nil {
		return m.BittrexID
	}
	return ""
}

func (m *Bitsdaq) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Bitsdaq) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *Bitsdaq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Bitsdaq) GetVol() int64 {
	if m != nil {
		return m.Vol
	}
	return 0
}

func (m *Bitsdaq) GetRevol() int64 {
	if m != nil {
		return m.Revol
	}
	return 0
}

func (m *Bitsdaq) GetCommission() float32 {
	if m != nil {
		return m.Commission
	}
	return 0
}

func (m *Bitsdaq) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Bitsdaq) GetPriceUnit() float32 {
	if m != nil {
		return m.PriceUnit
	}
	return 0
}

func (m *Bitsdaq) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*Bitsdaq)(nil), "action.Bitsdaq")
}

func init() { proto.RegisterFile("action/bitsdaq.proto", fileDescriptor_1c576da6b58fd095) }

var fileDescriptor_1c576da6b58fd095 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4e, 0xc4, 0x20,
	0x10, 0x86, 0x43, 0xbb, 0xed, 0x6e, 0x47, 0x0f, 0x86, 0xec, 0x61, 0x62, 0x8c, 0x21, 0x9e, 0x38,
	0xe9, 0xc1, 0x37, 0x30, 0xbd, 0xf4, 0x4a, 0xf4, 0x01, 0xba, 0x94, 0xb8, 0x93, 0x2c, 0xa5, 0x52,
	0x62, 0xd6, 0xe7, 0xf3, 0xc5, 0x0c, 0xd0, 0xb4, 0xde, 0xe6, 0xff, 0xbe, 0xf9, 0x09, 0x00, 0xc7,
	0x5e, 0x07, 0x72, 0xe3, 0xcb, 0x89, 0xc2, 0x3c, 0xf4, 0x5f, 0xcf, 0x93, 0x77, 0xc1, 0xf1, 0x3a,
	0xd3, 0xa7, 0xdf, 0x02, 0xf6, 0x6f, 0xd9, 0xf0, 0x07, 0x68, 0x6c, 0x1f, 0xf4, 0xd9, 0x0c, 0x5d,
	0x8b, 0x4c, 0x30, 0xd9, 0xa8, 0x0d, 0x44, 0xbb, 0x1c, 0xd1, 0xb5, 0x58, 0x64, 0xbb, 0x82, 0xc5,
	0x06, 0x6f, 0xae, 0x5d, 0x8b, 0xe5, 0x6a, 0x33, 0xe0, 0xf7, 0x70, 0x30, 0x57, 0x7d, 0xee, 0xc7,
	0x4f, 0x83, 0xbb, 0x24, 0xd7, 0x1c, 0x9b, 0xce, 0x0f, 0xc6, 0xbf, 0xff, 0x4c, 0x06, 0x2b, 0xc1,
	0x64, 0xa5, 0x36, 0xc0, 0x8f, 0x50, 0x5d, 0xc8, 0x52, 0xc0, 0x5a, 0x30, 0x59, 0xaa, 0x1c, 0xf8,
	0x1d, 0x94, 0xdf, 0xee, 0x82, 0xfb, 0xc4, 0xe2, 0x18, 0xf7, 0xbc, 0x89, 0xec, 0x90, 0xf7, 0x52,
	0xe0, 0x8f, 0x00, 0xda, 0x59, 0x4b, 0xf3, 0x4c, 0x6e, 0xc4, 0x46, 0x30, 0x59, 0xa8, 0x7f, 0x24,
	0xb6, 0x26, 0x4f, 0xda, 0x20, 0x08, 0x26, 0x99, 0xca, 0x21, 0xde, 0x28, 0x0d, 0x1f, 0x23, 0x05,
	0xbc, 0x49, 0xa5, 0x0d, 0x70, 0x0e, 0xbb, 0x40, 0xd6, 0xe0, 0x6d, 0x7a, 0x47, 0x9a, 0x4f, 0x75,
	0xfa, 0xd4, 0xd7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xe9, 0xc4, 0x72, 0x6c, 0x01, 0x00,
	0x00,
}
